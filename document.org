#+TITLE: Towards Metamorphic Domain-Specific Languages
#+AUTHOR: Pierre Le Gall

#+OPTIONS: toc:nil

#+LATEX_CLASS: custom
#+LATEX_CLASS_OPTIONS: [11pt]
#+LATEX_HEADER: \input{header}
#+LATEX_HEADER: \abstract{Dans ce document nous faisons l'état de l'art concernant les Domain-Specific Languages (DSLs) à l'aide de la littérature scientifique sur le sujet. Nous définissons les DSLs, les comparons aux General Purpose Languages (GPLs) et exposons les différentes catégories. Nous mettons en lumière différents critères de qualité proposés permettant une évaluation des DSLs. La question de l'implémentation d'un DSL est aussi abordé, donnant une vision plus technique d'une solution de ce type. La diversités des formes étant évidentes, nous discuterons des perspectives d'avenir. Normalisation et uniformisation ou métamorphisme ?}

* Introduction

  Les premiers programmes numériques étaient développés directement en langage machine. En plus d'être compatible qu'avec un type particulier de machine, ce travail était ingrat et source d'erreur. L'apparition de l'assembleur a permis de rendre le code produit plus générique et /human-readable/ grâce à une abstraction du code machine cible. L'arrivée des langages de programmation ont permis l'utilisation de concepts plus haut niveau tel que les types, les variables, les constantes, les listes, les fonctions, les structures, etc. qui permettent des constructions beaucoup plus proches de la vision que l'homme a d'un programme.

  Certains langages de programmation ont par la suite été conçus pour mieux répondre à une problématique particulière ; c'était déjà le but de COBOL [fn:Cobol-Accronym], qui tout en étant /Turing-complete/, est né dans l'optique de proposer un outil spécialisé dans la création d'applications de gestion. Mais pourquoi créer des outils pour un cas utilisation particulier ? Ne serait-ce pas réinventer la roue ? Pourquoi ne pas simplement avoir fait le choix de =Fortran= ou de =Lisp= ? Est-ce que être moins génériques ne revient pas à créer des barrières ? Le fait est que les outils sont plus efficaces quand ils sont adaptés au domaine d'application. C'est la raison du succès des /Domain-Specific Languages/. De nous jour, leur utilisation est devenu chose commune. Grâce l'abstraction qu'ils proposent, en plus d'être plus efficaces, l'utilisateur non programmeur peut interagir avec le système en ayant en tête les problématiques du domaine.

  L'usage des outils informatiques est simplifié grâce à eux. Pour lancer un programme, on peut l'appeller via un shell en lui passant des options adéquates. Pour questionner une base de données relationnelle, on lui parle en SQL. Si l'on veut écrire une page web, nous le faisons en HTML/CSS. Chacun de ses cas utilise une abstraction sous forme d'un DSL de la complexité interne des outils.

  De nombreux articles ont pour sujet les /Domain-Specific Languages/. Tout en revenant sur les bases de qu'est-ce qu'un langage (section 2), cette bibliographie essaye de regrouper les différentes définition du DSL (section 3), tout en le comparant aux /Global Purpose Languages/. Les deux grands types de DSL, externe et interne, seront exposés (section 4). Leurs critères de succès et d'échec dans les usages sont mis en lumière (section 6). Les solutions techniques d'implémentation seront aussi abordés (section 4). Suite à la mise en évidence de la diversité des syntaxes concrètes (section 7), il sera sujet de l'avenir dans le domaine (section 8).

* Qu'est ce que sont les /Domain-Specific Languages/
** La notion de langage

   Un langage est la composition d'une syntaxe (sa forme) ainsi que d'une sémantique (son sens). On peut voir la syntaxe comme la donnée et la sémantique comme l'information, c'est-à-dire l'interprétation sur la donnée \cite{Harel-and-Rumpe-2004}. Cela s'applique à tous les langages, des langues naturelles (anglais, français, etc.) aux langages de programmation.

*** La syntaxe

     La *syntaxe (concrète)* choisie est la représentation que l'on se fait du langage \cite{Fowler-2005}. On distingue deux types de syntaxe concrète : les syntaxes textuelles qui sont composés d'une suite de caractères et les syntaxes graphiques qui sont construites avec des éléments plus visuelles tel que des flèches, des formes, etc. En mathématique, elles sont le plus souvent défini grâce à une grammaire [fn:Not-only-Grammars]. Une grammaire est un ensemble de règles écrite dans un langage formel (on parle de grammaire formelle). Ces règles décrivent comment former des « phrases » en fonction des « mots » rencontrés. Le langage BNF [fn:Yacc-and-Bison] est un exemple d'outil permettant la définition de grammaire \cite{Garshol-2008} (voir figure [[BNF-Example]]), mettant en évidence les symboles terminaux et non-terminaux de la syntaxe.

    #+CAPTION: Exemple d'utilisation de BNF (Backus Naur Form) : définition de la représentation textuelle d'une valeur numérique (entier et flottant)
    #+NAME: BNF-Example
    #+BEGIN_SRC bnf
    numeric := float | integer
    float   := dstring '.' dstring | - dstring '.' dstring
    integer := dstring | '-' dstring
    dstring := digit dstring | digit
    digit   := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
    #+END_SRC

    La syntaxe concrète s'oppose à la *syntaxe abstraite*. Cette dernière est une altération de la syntaxe concrète. Cette forme est structurée de façon à être adaptée à une utilisation par la machine. Elle prend très souvent la forme d'un arbre (appelé Arbre de Syntaxe Abstraite, /Abstract Syntax Tree/ ou /AST/) (voir figure [[Abstract-Syntax-Tree-Example]]) où chaque noeuds représentent un élément, qui peuvent eux même être composés de plusieurs sous-éléments. Certains détails de la syntaxe concrète peuvent être ôter. Il est donc possible d'arriver à un même AST avec des syntaxes concrètes différentes. On peut dire qu'un langage peut avoir deux syntaxes concrètes, ou deux langages qui partage la même syntaxe abstraite \cite{Fowler-2005}.

    #+NAME: Abstract-Syntax-Tree-Example
    #+CAPTION: Exemple d'arbre de syntax abstraite: représentation abstraite de la fonction f(n) = n * (n + 1) / 2 \cite{Harel-and-Rumpe-2004}
    #+ATTR_LATEX: :width 4cm
    [[./pictures/Abstract-Syntax-Tree-Example.png]]

    Nous avons ici exposé le principe de syntaxe qui seul ne permet pas de donner du sens à un langage. L'étape suivante donc de définir la sémantique.

*** La sémantique

    La sémantique est le sens que l'on donne à un langage. Grâce à l'analyse grammaticale, un forme plus structurée de la syntaxe en entrée est obtenue. C'est sur cette structure que l'on peut travailler pour en déduire le comportement attendu. Les mathématiques exposent les règles de transformation en sémantique opérationnelle, en sémantique dénotationnelle ou en sémantique axiomatique que nous n'aborderons pas ici. Les programmes, appelés compilateur, ont pour but de transformer cette structure de donnée en un autre langage, comme le langage machine par exemple. Cela dit, le sens peut être informel par une spécification via une langue naturelle.

** Définir le DSL

   Les /Domain-Specific Languages/, aussi appelés /Little Languages/ \cite{Hudak-1996}, sont des langages sur mesure par rapport à un domaine d'application. Leurs raison d'être est d'exprimer au mieux ce domaine. En s'abstenant d'exposer les problématiques techniques, ils s'ouvrent à un « public plus large » \cite{Mernik-et-al-2005}. Un DSL adapté réduit considérablement le fossé entre le métier et les documents produits. Bien utilisés, ils deviennent un nouveau vecteur de communication.

   Les DSL s'opposent aux /General Purpose Languages/ (GPL) ; c'est-à-dire les langages de programmation conçu pour but de résoudre un large panel de problèmes. Si ils sont pensé pour être génériques, les DSL diminues fortement le niveau d'abstraction réduisant les ambiguïtés \cite{Hudak-1996}. De ce fait, le DSL permet un gain de productivité important. L'étude de l'impact de ACA.NET \cite{Hermans-et-al-2009} donne en conclusion que l'utilisation de DSL permettent une baisse des coûts de développement et une meilleure réutilisabilité du code produit.

   Malgré tout, la frontière entre GPL et DSL n'est pas nette, mais plutôt graduelle \cite{Voelter-2013, Mernik-et-al-2005}. Cependant, quelques caractéristiques ne trompent pas. En effet, si le DSL n'est pas forcément /Turing-complete/ et est potentiellement conçu pour une utilisation à cours terme, ce n'est jamais le cas pour un GPL (voir tableaux [[GPL-or-DSL]]).

   #+NAME: GPL-or-DSL
   #+CAPTION: Gradualité entre GPL et DSL \cite{Voelter-2013}
   |                            | *GPLs*                         | *DSLs*                     |
   |----------------------------+--------------------------------+----------------------------|
   | *Domain*                   | large and complex              | smaller and well-defined   |
   | *Language size*            | large                          | small                      |
   | *Turing completeness*      | always                         | often not                  |
   | *User-defined abstraction* | sophisticated                  | limited                    |
   | *Execution*                | via intermediate GPL           | native                     |
   | *Lifespan*                 | years to decades               | month to years             |
   | *Designed by*              | guru or committee              | few engineers and experts  |
   | *User community*           | large, anonymous and widspread | small, accessible an local |
   | *Evolution*                | slow, often standardized       | fast-paced                 |
   | *Incompatibility changes*  | almost impossible              | feasible                   |

   \cite{Fowler-2005} cite plusieurs traditions dans le DSL, on y retrouve les /Unix Little Languages/ (/mini-langages/ pour le système construit avec la /tool-chain/ Unix), les dialects de Lisp (probablement l'exemple le plus fort pour exprimer un DSL dans le langage lui même), l'/Adaptive Model Object/ (très productif mais demande de connaître l'architecture du projet), l'XML (sa grammaire et ses outils de parsing disponibles mais cependant pas forcément facile à lire), ou encore les /GUI builders/ (permettant un syntaxe plus déclarative et moins procédurale). Ces outils sont puissants : les /Unix Little Languages/ permettent de configurer tout un système grâce à de simples fichiers textes. Les Lisp permettent de redéfinir toute une syntaxe dans le GPL lui même. L'/Adaptive Model Object/ permet de rendre le métier expressive dans une application programmé dans un langage orienté objet. L'XML permet de proposer une syntaxe concrète qui peut être réutiliser pour divers solutions. Et enfin les /GUI builders/ ont permis d'abstraire la déclaration des interface homme-machine (voir =HTML= ou encore =QML=).

   \cite{Ward-1994} positionne le DSL au centre des problématiques logicielles (voir figure [[Middle-Out-Development]]) dans sa définition du /language-oriented programming/, c'est-à-dire entre le métier et les aspects techniques. En effet, le DSL permet une meilleure compréhension du domaine ainsi qu'une optimisation des exécutions côté machine \cite{Sujeeth-et-al-2013}.

   #+NAME: Middle-Out-Development
   #+CAPTION: Notion de /Middle-out-development/ \cite{Ward-1994}
   #+ATTR_LATEX: :width 5cm
   [[./pictures/Middle-Out-Development.png]]

** Externe et interne

   Les /Domain-Specific Languages/ se divisent en deux grande catégories : les DSL externes et les DSL internes.

*** DSL externes

    Les DSL externes sont construits /from scatch/. Les concepteurs ont la *liberté* de construire les éléments de la grammaire (en s'inspirant ou non de langages existants) ainsi que de sélectionner les principaux concepts applicables. Souvent accompagnés d'outils spécifiques, ils sont capables de fonctionner en */standalone/*. Cela permet de *s'affranchir de diverses contraintes*, notamment celles du langage au coeur de la solution métier \cite{Karsai-et-al-2009}. Ce nouveau langage est *indépendant*. \cite{Fowler-2005} liste plusieurs problèmes relatifs aux DSL externes. Ils commencent par créent une *barrière symbolique* avec le langage de base, ce qui rend l'intéropérabilité difficile. L'utilisateur aillant en main un langage limiter, il n'est pas évident de pouvoir effectuer une action hors de la portée du langage. Fowler continue en utilisant le terme *cacophonie des langages* : si un langage demande un effort d'apprentissage, peut-être que est-ce une mauvaise idée de les multiplier. Cependant, il ne faut pas oublier que ces langages ont pour but d'être simple, limitant la valeur de cette dernière critique.

    Si un DSL (voir l'exemple avec SQL figure [[External-DSL-Example-with-SQL]]) limite l'utilisateur dans le cadre de la manipulation de données provenant de bases de données relationnelles, il ne faut pas voir cette contrainte comme un simple inconvénient. Ceci encourage l'écriture de code plus compréhensible en étant plus plus déclaratif dans un contexte bien défini. De plus, si l'utilisateur n'a pas accès à toutes le fonctionnalités du système, le DSL est aussi une sécurité contre les maladresses. Si cela est aussi vrai pour le DSL interne, il l'est particulièrement pour le DSL externe qui restreint l'utilisateur dans le cadre du domaine.

    #+NAME: External-DSL-Example-with-SQL
    #+CAPTION: Un exemple de DSL externe avec SQL
    #+BEGIN_SRC sql
      SELECT *
        FROM cat
       WHERE born_in = 2015
    ORDER BY name
    #+END_SRC

*** DSL internes

    Gérer la communication entre plusieurs langages est une tâche compliqué, ce qui a pour conséquence que les développeurs font souvent le choix du DSL interne \cite{Renggli-and-Girba-2009}.

    L'idée d'un DSL interne est d'*utiliser les capacités d'un GPL* pour exprimer un domaine. On parle aussi de /Embedded Domain-Specific Languages/ (EDSL ou DSEL) [fn:Is-Embedded-DSL-equivalent-to-Internal-DSL] \cite{Hudak-1996}. De cette manière, il n'existe pas de *barrière symbolique*. L'utilisateur peut utiliser un GPL sans avoir à comprendre toutes ses subtilités. De ce point de vu, il n'y plus de limite artificielle, *toutes les capacités du langage hôte* sont disponibles. Toutes fois, il est possible de se perdre dans ce nuage de fonctionnalités \cite{Fowler-2005}. L'approche interne demande moins d'effort que l'approche externe pour les concepteurs \cite{Kamin-1998}, impactant directement les *coûts de développement*. En effet, il est possible de profiter de l'intégration du GPL hôte (parser, debbuger, compilateur, coloration syntaxique, etc.) ; à noter que la solution finale *tend à être moins adapté* (ex. retours d'erreurs) qu'avec un DSL externe. Malheureusement, il se peut qu'il soit compliqué d'adapter un DSL aux *contraintes syntaxiques du GPL hôte* choisi rendant le résultat peu efficace pour l'expert métier. C'est le cas pour la plupart des GPL proposant syntaxe proche du langage C \cite{Fowler-2005, Stefik-and-Siebert-2013}.

    #+NAME: Internal-DSL-example
    #+CAPTION: Un exemple de DSL interne, équivalent du DSL externe (=SQL=) en figure [[[[External-DSL-Example-with-SQL]], avec la bibliothèque =jOOQ= (=Java=)
    #+BEGIN_SRC java
    create.selectFrom(CAT)
          .where(CAT.BORN_IN.eq(2015))
          .orderBy(CAT.NAME)
    #+END_SRC

    \cite{Gibbons-and-Wu-2014} distinguent le DSL interne peu profond (/shallow DSEL/) et profond (/deep DSEL/). Le /shallow DSEL/ est le fait de se servir de la syntaxe du langage hôte comme base de formalisation de notion du domaine. Si nous avons "=chat + chien=", cela doit aussi avoir du sens dans le langage hôte. À l'inverse le /deep DSEL/ ne se contente pas simplement d'exécuter la chaîne en entrée, il en crée un AST. Le comportement de cette structure peut être défini par la suite. Ce deuxième type de DSL nous donne plus de contrôle sur l'exécution des entrées.

    #+NAME: DSL-Types
    #+CAPTION: Les différents types de DSL (source : https://queue.acm.org/detail.cfm?id=2617811)
    [[./pictures/DSL-Types.png]]

*** Faire un choix

    Pour faire le choix d'une solution, externe ou interne, il faut peser le pour et le contre en fonction de la situation. La figure [[How-to-Choose-between-External-and-Internal-DSL]] pose jusqu'à quatre questions pour faire son choix. Le DSL interne est fortement déconseillé si il y a pas de besoins de AVOPT [fn:AVOPT] et si une notation du domaine doit être respecté strictement.

    #+NAME: How-to-Choose-between-External-and-Internal-DSL
    #+CAPTION: Diagramme aidant à faire le choix du DSL externe ou interne \cite{Mernik-et-al-2005}
    #+ATTR_LATEX: :width 10cm
    [[./pictures/How-to-Choose-between-External-and-Internal-DSL.png]]

* Succès et échecs

  Nous abordons ici les comportements conseillés ou non dans le DSL, mettant le doigt sur les problématiques de la conception. Nous finirons pas présenter les critères de qualification d'un DSL.

** Bonnes et mauvaises pratiques

   Le design d'un /Domain-Specific Language/ requière des connaissances en développement de langage ainsi qu'une connaissance du domaine \cite{Mernik-et-al-2005}. C'est un point très important car le domaine est au centre du problème.

   Pour apporter de la méthodologie dans la conception de DSL, \cite{Karsai-et-al-2009} proposent une ligne de conduite. Ils insistent sur le fait de se rapprocher des experts, ne pas hésiter à poser des questions. Il est conseillé des rester proche du domaine, de ne pas généraliser si cela ne semble utile à aucun cas clair d'utilisation. Il faut utiliser une notation descriptive, concis mais pas trop, et rendre possible les commentaires qui sont là pour corriger tout manque de clarté.

   Si ces conseils semblent généralistes, ce n'est pas le cas des problèmes relevé par \cite{Kelly-and-Pohjonen-2009} grâce à une analyse de plusieurs DSL. Si le manque de compréhension métier des problématiques est cité, les mauvaises pratiques les plus fréquentes restent : décider la solution initiale comme inaltérable ; laisser stagner le langage ; et utiliser le code source comme modèle. Diverses choses sont aussi énoncées, parmi elles à éviter : mettre l'accent sur un sous-domaine ; prédéterminer le paradigme ; ignorer le cas réel d'utilisation ; ou encore considérer que tout le monde comprend la solution.

** Qualification du DSL

   Il est compliqué de juger un DSL sans critère précis. \cite{Karsai-et-al-2009} ont réunis les différents facteurs de succès rencontrés dans la littérature sur les DSL. On y trouve : l'apprenabilité (L), la convivialité (U), l'expressivité (E), la réutilisabilité (R), le coût de développement (C) et la fiabilité (I) (voir tableau [[Success-Factors]]).

   #+NAME: Success-Factors
   #+CAPTION: Facteurs de succès proposé par \cite{Hermans-et-al-2009}
   | *(L) Learnability*     | Developers have to learn an extra language,     |
   |                        | which takes time and effort. Furthermore,       |
   |                        | as he domain changes the DSL has ot evolve      |
   |                        | and developers need to stay up-to-date.         |
   | *(U) Usability*        | Tools and methods supporting the DSL should     |
   |                        | be easy and convenient to use.                  |
   | *(E) Expressiveness*   | Using a DSL, domain specific features can       |
   |                        | be implemented compactly, however, the language |
   |                        | is specific to that domain and limits the       |
   |                        | possible scenarios that can be expressed.       |
   | *(R) Reusability*      | With a DSL, reuse is possible at the model      |
   |                        | level, making it easier ti reuse partial or     |
   |                        | even entire solutions, rather than pieces of    |
   |                        | source code.                                    |
   | *(C) Development Cost* | The DSL hepts developers to model domain        |
   |                        | concepts that otherwise are time-consuming to   |
   |                        | implement. The corresponding source code is     |
   |                        | generated automatically. The corresponding      |
   |                        | sources code is generated automatically.        |
   |                        | This lowers developement costs and shortens     |
   |                        | time-to-market.                                 |
   | *(I) Reliability*      | In addition toreducing development cost,        |
   |                        | automation of large parts of the development    |
   |                        | process leads to fewers errors.                 |

   \cite{Albuquerque-et-al-2014} proposent la réutilisation des critères cognitifs de \cite{Blackwell-and-Green-2003}. Ils les séparent en deux catégories : l'*expressivité* et la *brièveté*. L'expressivité (/expressiveness/) est la capacité du DSL à représenter les éléments du domaine (voir tableau [[Expressiveness]]). La brièveté (/conciseness/) est l'économie de termes dans la syntaxe (voir tableau [[Conciseness]]). Ces caractéristiques étant opposés, les concepteurs doivent faire en sorte d'avoir un DSL équilibré. Malheureusement, il est difficile d'identifier ces forces et faibles de la phase de conception \cite{Albuquerque-et-al-2014}.

   #+NAME: Expressiveness
   #+CAPTION: Critères concernant l'expressivité proposés par \cite{Albuquerque-et-al-2014}
   | Expressiveness         |                                                     |
   |------------------------+-----------------------------------------------------|
   | *Hidden Dependencies*  | Relevant relations between entities are not visible |
   | *Role-Expressiveness*  | The purpose of an entity is readily inferred        |
   | *Abstraction*          | Type and availability of abstraction mechanisms     |
   | *Closeness of Mapping* | Closeness of representation to domain               |

   #+NAME: Conciseness
   #+CAPTION: Critères concernant la brièveté proposés par \cite{Albuquerque-et-al-2014}
   | Conciseness              |                                    |
   |--------------------------+------------------------------------|
   | *Viscosity*              | Resistance to change               |
   | *Visibility*             | Ability to view entities easily    |
   | *Diffuseness*            | Verbosity of language              |
   | *Hard Mental Operations* | High demand on cognitive resources |

* Outils et méthodes d'implémentations

  Le sujet de cette section concerne les outils et méthodes d'implémentations. Nous parlerons des capacités de certains GPL pour accueillir des DSL et de /frameworks/ aidant la conception de DSL.

** Fonctionnalités des langages

   Les langages ne sont pas tous égaux face à la définition de DSL en interne. Certains langages, bien que populaires, sont très rigides face à l'accueil de notions d'un domaine. C'est le cas des langages ayant une syntaxe proche du =C=, tel que =Java= et =C#=. C'est en partie grâce à une syntaxe peu intrusive qu'un langage peut être plus « accueillant » \cite{Fowler-2005}. Les implémentations issues du dialectes Lisp sont intéressantes de ce côté. Leur système de macro, permettent de donner une sémantique à une syntaxe interne très malléable (voir figure [[Lisp-Json-Reader]]).

   #+NAME: Lisp-Json-Reader
   #+CAPTION: Un exemple de flexibilité de la syntaxe Lisp avec json-reader
   #+BEGIN_SRC lisp
   (json-reader:enable-json-syntax)
   (let ((x {
              "foo": 1,
              "bar": ["a", "b", "c"]
              "baz": { foo: 42 }
            } ))
     (assert (hash-table-p x))
     (assert (= (hash-table-count x) 3))
     (assert (eql (gethash "foo" x) 1))
     (assert (vectorp (gethash "bar" x)))
     (assert (hash-table-p (gethash "baz" x))))
   (json-reader:disable-json-syntax)
   #+END_SRC

   Certains voient les langages de programmation fonctionnelle comme de très bon candidats. Haskell possède certaines fonctionnalités (comme les monades) qui conviennent au développement de DSL \cite{Hudak-1996} (voir figure [[Haskell-Monad]]).

   #+NAME: Haskell-Monad
   #+CAPTION: Un exemple de l'utilisation de Monad en Haskell pour la création de DSL
   #+BEGIN_SRC haskell
   Haskell monad example
   #+END_SRC

   Les langages dynamiques (c'est-à-dire à typage dynamique, par opposition aux langages statiques) sont aussi plus permissifs. Un bon exemple est l'exploitation de la méta-programmation dans le /framework/ web =Ruby on Rails= \cite{Fowler-2005}. =Smalltalk=, lui aussi dynamique, permet beaucoup d'expressivité grâce à son système de méthode en plusieurs parties (voir figure [[Smalltalk-Example]]). Pour \cite{Renggli-and-Girba-2009}, Smalltalk apparaît comme le plus adapté (voir tableau [[Smalltalk-as-the-most-Suitable]]). En effet, sa syntaxe minimaliste, les forces du paradigme objet et ses capacités de réflexion font de lui un très bon outils pour construire des DSL.

   #+NAME: Smalltalk-Example
   #+CAPTION: SQL DSL en Smalltalk grâce aux méthodes à plusieurs parties
   #+BEGIN_SRC smalltalk
   postsToShow := Posts findAll
                        where:   [:each | each isPublished] ;
                        orderBy: [:each | each timestamp descending] ;
                        limit:   5 ;
                        execute.
   #+END_SRC

   #+NAME: Smalltalk-as-the-most-Suitable
   #+CAPTION: Comparaison des capacités d'accueil d'un DSL entre plusieurs langages \cite{Renggli-and-Girba-2009}. Legende : \Circle{} non supporté, \LEFTcircle{} partiellement supporté, \CIRCLE{} supporté.
   #+ATTR_LATEX: :width 10cm
   [[./pictures/Smalltalk-as-the-most-Suitable.png]]

   LMS (/Lightweight Modular Staging/) est un système de génération de code à l'exécution pour le langage Scala \cite{Rompf-and-Odersky-2012}. En associant l'agilité que propose le DSL et les transpositions de code plus rapide d'exécution pour la machine, les programmes écrits en Scala peuvent être plus rapide que l'équivalent en C écrit à main. On retrouve ici le principe du /deep DSEL/. La figure [[Scala-LMS-Result]] montre le résultat de l'exécution de code en figure [[Scala-LMS-Source]] avec LMS.

   #+NAME: Scala-LMS-Source
   #+CAPTION: Exemple d'utilisation de LMS (source : https://scala-lms.github.io)
   #+BEGIN_SRC scala
   class Vector[T:Numeric:Manifest](val data: Rep[Array[T]]) {
     def foreach(f: Rep[T] => Rep[Unit]): Rep[Unit] = {
       for (i <- 0 until data.length) f(data(i))
     }
     def sumIf(f: Rep[T] => Rep[Boolean]) = {
       var n = zero[T]
       foreach(x => if (f(x)) n += x)
       return n
     }
   }

   val v: Vector[Double] = ...
   println(v.sumIf(_ > 0))
   #+END_SRC

   #+NAME: Scala-LMS-Result
   #+CAPTION: Code généré à l'exécution (source : https://scala-lms.github.io)
   #+BEGIN_SRC scala
   var n: Double = 0.0
   var i: Int = 0
   val end = data.length
   while (i < end) {
     val x = data(i)
     val c = x > 0
     if (c) n += x
   }
   println(n)
   #+END_SRC

** /Frameworks/

   Il existe plusieurs /frameworks/ aidant la conception de DSL. \cite{Voelter-2013} retient trois /frameworks/ représentatif de l'état de l'art dans la conception de Domain-Specific Languages : Spoofax, Xtext et MPS (/Meta Programming System/). Ils font partis des outils de type /language workbench/ \cite{Fowler-2005} encadrant la pratique du /language-oriented programming/.

   Spoofax utilise plusieurs métalangages pour définir les différents éléments du langage : =SDF3= défini la syntaxe. =NaBL= crée des contextes dans le langage (imports, namespaces, scopes, etc.). =TS= spécifie les types, ce qui permet d'éviter les erreurs de à l'exécution. Et finalement =Stratego=, qui permet de donner une sémantique au langage.

   Contrairement à Spoofax, Xtext réutilise au plus des outils préexistants. Il se sert d'un langage proche de =EBNF= pour définir la syntaxe concrète, de =EMF= pour la génération de code et de bibliothèque =Java= pour diverse problématiques.

   Si Spoofax et Xtext se focalise sur le DSL textuel, MPS propose des interactions plus visuelles comme la possibilité de manipuler des tableaux ou des schémas. Lors de l'utilisation de projection, si l'utilisateur voit la syntaxe concrète, l'édition de fait directement sur l'AST, ce qui permet de conserver la cohérence (voir figure [[Parsing-and-Projectional-Styles]]).

   #+NAME: Parsing-and-Projectional-Styles
   #+CAPTION: Sur la gauche le fonctionnement de Spoofax et Xtext et sur la droite le fonctionnement de MPS \cite{Voelter-2013}. Xtext peut adopter le comportement de droite mais ce n'est pas son mode par défaut.
   #+ATTR_LATEX: :width 8cm
   [[./pictures/Parsing-and-Projectional-Styles.png]]

* Constats et perspectives

  Les critères de qualité du DSL restent difficiles à mesurer \cite{Albuquerque-et-al-2014} et sont encore trop jeunes pour être utilisés industriellement pour les évaluations. Les études montrent l'impact positif qu'on les solutions de type /language workbench/ introduit par \cite{Fowler-2005}. Spoofax, Xtext et MPS sont des solutions techniques qui ont hérité de ce principe. Avec une solutions de type MPS, la forme abstraite est manipulée grâce aux diverses vues disponibles (voir figure [[Manipulating-representations-with-a-Language-Workbench]]). L'information est présentée sous différentes formes, permettant si besoin de cacher le contenu inutile. Cette vision était déjà à l'époque défini comme la « nouvelle génération de feuille de calcul » \cite{Fowler-2005} : un environnement ou l'utilisateur lambda peut rapidement devenir apte à user de fonctionnalités avancés. L'utilisation d'une syntaxe abstraite, comme artefact éditable permet d'uniformiser la forme, ce qui répond à une problématique forte.

  #+NAME: Manipulating-representations-with-a-Language-Workbench
  #+CAPTION: Manipulation des représentation avec le /language workbench/ \cite{Fowler-2005}.
  #+ATTR_LATEX: :width 13cm
  [[./pictures/Manipulating-representations-with-a-Language-Workbench.png]]

  Jongler avec $n$ syntaxes (externes, et potentiellement plusieurs internes pour un même DSL) crée des barrières symboliques. Les outils issue du /language workbench/ ne sont pas toujours une solution acceptable car il peut être difficile de savoir quelle forme adopter. \cite{Acher-et-al-2014} définissent le terme de /Metamorphic DSL/ avec l'expérience FAMILIAR. Le fait est que les syntaxes concrètes forcent le choix d'une forme qui n'est pas adapté à tous les cas d'utilisations. Le /Metamorphic DSL/ conceptualise la capacité d'un DSL de passer d'une syntaxe concrète à une autre selon le cas d'utilisation (tâche à effectuer, outil utilisé), permettant ainsi de ne pas avoir à choisir une mais plutôt plusieurs formes (voir figure [[Metamorphic-DSL-Usecase]]).

  #+NAME: Metamorphic-DSL-Usecase
  #+CAPTION: Cas d'utilisation du /Metamorphic DSL/ \cite{Acher-et-al-2014}.
  #+ATTR_LATEX: :width 15cm
  [[./pictures/Metamorphic-DSL-Usecase.png]]

  Ces deux solutions ont une vision différente. Si le /language workbench/ propose une forme plus approprié pour un problème donné, le /Metamorphic DSL/ donne le choix de la forme que peut prendre un DSL selon le cas d'utilisation.

* Conclusion

  Le DSL est l'outil qui réconcilie les domaines avec le code source. Les langages de programmation ont longtemps été des outils que seul les programmeurs pouvaient manipuler. En donnant une vrai place aux notions métiers, les experts ont la possibilité de produire et de communiquer via les sources comme média, prenant ainsi le contrôle de la logique métier.

  Ces pratiques ont démontré leurs impacts bénéfiques sur la productivité et les coûts. Cependant, faire le choix d'utiliser ou non un DSL n'est pas évident, tout comme les choix de conception de ce DSL. Une analyse préalable accompagné de bonnes pratiques doit être effectué. Si les environnements de /language workbench/ ont rendu accessible le /language-oriented programming/, le choix de la forme la plus adéquate reste préoccupant. C'est dans l'optique de répondre à ce problème que le concept de /Metamorphic DSL/ à vu le jour.

  La capacité de passer de forme en forme serait-elle une nouvelle étape dans l'évolution des /Domain-Specific Languages/ ?

#+BEGIN_LATEX
\newpage
\bibliographystyle{apalike}
\bibliography{references}
#+END_LATEX

* Footnotes

[fn:Cobol-Accronym] Cobol pour /Common Business-Oriented Language/
[fn:Yacc-and-Bison] Yacc et Bison sont deux équivalents informatique à BNF
[fn:Not-only-Grammars] Les automates et les expressions régulière permettent aussi la définition de syntaxes
[fn:Is-Embedded-DSL-equivalent-to-Internal-DSL] Le fait que les DSEL soit équivalents aux DSL internes est discuté dans la littérature
[fn:AVOPT] AVOPT pour analyse, vérification, optimisation, parallélisation et transformation
[fn:cl-json-reader] cl-json-reader : https://github.com/qinix/cl-json-reader
[fn:Scala-LMS] Scala-LMS : https://scala-lms.github.io/
